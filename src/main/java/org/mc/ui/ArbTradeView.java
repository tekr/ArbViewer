package org.mc.ui;

import org.mc.adapters.binance.BinanceInstrumentSource;
import org.mc.adapters.binance.BinanceMarketDataSource;
import org.mc.adapters.bybit.BybitInstrumentSource;
import org.mc.adapters.bybit.BybitMarketDataSource;
import org.mc.services.SpotVsFutureArbTradeService;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.Timer;
import java.util.TimerTask;

public class ArbTradeView {
    private JTable table;
    private JPanel panel;
    private JSpinner minDaysToExpirySpinner;

    SpotVsFutureArbTradeService arbTradeService = new SpotVsFutureArbTradeService(
            new BinanceMarketDataSource(new BinanceInstrumentSource()),
            new BybitMarketDataSource(new BybitInstrumentSource()));

    ArbViewerTableModel tableModel = new ArbViewerTableModel();

    public static void main(String[] args) throws Exception {
//        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

//        UIDefaults defaults = UIManager.getLookAndFeelDefaults();
//        defaults.putIfAbsent("Table.alternateRowColor", new Color(245, 245, 255));

        new ArbTradeView().init();
    }

    private void init() {
        table.setModel(tableModel);
        tableModel.initColumns(table);

        minDaysToExpirySpinner.setValue(5);

        JFrame frame = new JFrame("ArbTradeView");
        frame.setContentPane(panel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.pack();
        frame.setSize(1200, 1200);
        frame.setVisible(true);

        var timer = new Timer(true);

        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                updateTableData();
            }
        }, 0, 3000);
    }

    private void updateTableData() {
        var minDaysToExpiry = (int) minDaysToExpirySpinner.getValue();

        var trades = arbTradeService.getSortedTrades(minDaysToExpiry);

        Object[][] data = trades.stream().map(t ->
                new Object[]{t.buyQuote().instrument(), t.buyQuote().exchange(), t.getBuyPrice(),
                        t.sellQuote().instrument(), t.sellQuote().exchange(), t.getSellPrice(),
                        t.daysToExpiry(), t.getFlatPremium() * 100, t.getAnnualisedPremium() * 100}).toArray(Object[][]::new);

        SwingUtilities.invokeLater(() -> {
            tableModel.setNumRows(0);

            for (int i = 0; i < data.length; i++) {
                tableModel.insertRow(i, data[i]);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(null, "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        table = new JTable();
        table.setAutoCreateRowSorter(true);
        table.setIntercellSpacing(new Dimension(20, -1));
        table.setRowHeight(25);
        table.setRowSelectionAllowed(false);
        table.setShowHorizontalLines(true);
        table.setShowVerticalLines(true);
        scrollPane1.setViewportView(table);
        final JLabel label1 = new JLabel();
        label1.setText("Minimum days to expiry:");
        panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        minDaysToExpirySpinner = new JSpinner();
        panel.add(minDaysToExpirySpinner, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), null, 1, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
